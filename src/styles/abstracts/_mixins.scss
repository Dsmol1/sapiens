@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-x-align {
  display: flex;
  align-items: center;
}
@mixin flex-y-align {
  display: flex;
  justify-content: center;
}

@mixin min($size) {
  @media only screen and (min-width: $size + px) { @content; }
}

@mixin max($size) {
  @media only screen and (max-width: $size + px) { @content; }
}

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}

@mixin zero() {
	margin:0;
	padding:0;
}

 // example: @include border-radius(4px 4px 4px 4px);


@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
}

// example: @include transition(background, 1s, ease-in-out, 0);

@mixin transition($property: all, $duration: 150ms, $timing-function: ease-in-out) {
  -webkit-transition: $property $duration $timing-function;
     -moz-transition: $property $duration $timing-function;
       -o-transition: $property $duration $timing-function;
	  -ms-transition: $property $duration $timing-function;
          transition: $property $duration $timing-function;
}

// example: @include double-transition(background, 1s, ease-in-out, 0, opacity, .1s, ease-in-out, 0);

@mixin double-transition($property1, $duration1, $timing-function1, $delay1, $property2, $duration2, $timing-function2, $delay2) {
  -webkit-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
     -moz-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
       -o-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
	  -ms-transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
          transition: $property1 $duration1 $timing-function1 $delay1, $property2 $duration2 $timing-function2 $delay2;
}

@mixin icomoon() {
   /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  display: inline-block;
  vertical-align: middle;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// example: @include transform("origin", 0, 0);

@mixin transform($type, $values...) {
  $n: length($values);
  $i: 1;

  $originVal: ();

  @while $i <= $n {
    $itemVal: (nth($values, $i));
    @if $type == "rotate" or $type == "rotateY" or $type == "rotateX" {
      $originVal: append($originVal, $itemVal + deg);
    } @else {
      $originVal: append($originVal, $itemVal + px);
    }

    $i: $i + 1;
  }
  -webkit-transform: #{$type}($originVal);
     -moz-transform: #{$type}($originVal);
          transform: #{$type}($originVal);
}

@mixin rotate( $val: -2deg ) {
-webkit-transform: rotate($val);
-moz-transform: rotate($val);
-ms-transform: rotate($val);
-o-transform: rotate($val);
transform: rotate($val);
}